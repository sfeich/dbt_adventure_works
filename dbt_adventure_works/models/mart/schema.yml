version: 2

models:
  - name: dim_customer
    description: "Dimension table containing customer information in mart layer, derived from int_customer view"
    config:
      contract: {enforced: true}
      post_hook: "{{ create_clustered_index(columns=['CustomerKey'], unique=True) }}"
    columns:
      - name: CustomerKey
        description: "The primary key for this table"
        data_type: int
        constraints:
          - type: not_null
          - type: primary_key
        data_tests:
          - unique
          - not_null
          - dbt_utils.cardinality_equality:
              field: CustomerKey
              to: ref('int_customer')
              # CustomerKey field in dim_customer is inherited from int_customer and must have same cardinality.
      - name: CustomerAlternateKey
        description: "The alternate key for this table"
        data_type: nvarchar(15)
        constraints:
          - type: not_null
          - type: unique
        data_tests:
          - unique
          - not_null
          - dbt_utils.cardinality_equality:
              field: CustomerAlternateKey
              to: ref('int_customer')
              # CustomerAlternateKey field in dim_customer is inherited from int_customer and must have same cardinality.
      - name: GeographyKey
        description: "Foreign key to link to primary key of DimGeography table"
        data_type: int
        constraints:
          - type: foreign_key
        data_tests:
          - not_null
          - dbt_utils.cardinality_equality:
              field: GeographyKey
              to: ref('int_customer')
              # GeographyKeyKey field in dim_customer is inherited from int_customer and must have same cardinality.
      - name: FirstName
        description: "First name of the customer"
        data_type: nvarchar(50)
        data_tests:
          - not_null: # warn if null instances; only error if nulls exceed threshold
              config: 
                severity: error
                error_if: ">10"
                warn_if: ">0"
          - dbt_expectations.expect_column_values_to_match_like_pattern_list:
              like_pattern_list: ["%[A-Za-z]%"] # only allow alphabetic sequences
              match_on: any      
      - name: MiddleName
        description: "Middle name of the customer"
        data_type: nvarchar(50)
      - name: LastName
        description: "Last name of the customer"
        data_type: nvarchar(50)
        data_tests:
          - not_null: # warn if null instances; only error if nulls exceed threshold
              config: 
                severity: error
                error_if: ">10"
                warn_if: ">0"
          - dbt_expectations.expect_column_values_to_match_like_pattern_list:
              like_pattern_list: ["%[A-Za-z]%"] # only allow alphabetic sequences
              match_on: any    
      - name: BirthDate
        description: "Date of birth of customer (in format yyyy/mm/dd)"
        data_type: date
        data_tests:
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: date
      - name: Age
        description: "Age of the customer"
        data_type: int  
        data_tests:
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [tinyint, smallint, int]
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 125
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: MaritalStatus
        description: "Marital status of customer"
        data_type: varchar(7)
        data_tests:
          - not_null: # warn if null instances; only error if nulls exceed threshold
              config: 
                severity: error
                error_if: ">10"
                warn_if: ">0"
          - accepted_values:
              values: ['Married', 'Single']
      - name: Gender
        description: "Gender of customer"
        data_type: varchar(6)
        data_tests:
          - not_null: # warn if null instances; only error if nulls exceed threshold
              config: 
                severity: error
                error_if: ">10"
                warn_if: ">0"
          - accepted_values:
              values: ['Male', 'Female']
      - name: YearlyIncome
        description: "The yearly income of the customer"
        data_type: money
        data_tests:
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              strictly: false # adds an 'or equal to' to the comparison operator
          - dbt_expectations.expect_column_values_to_be_within_n_stdevs:
              sigma_threshold: 5 # warn if instances >5 sigma above mean; only error if >10 such instances
              config: 
                severity: error
                error_if: ">10"
                warn_if: ">0"
      - name: TotalChildren
        description: "The total no. of children of the customer"
        data_type: int
        data_tests:
          - not_null: # warn if null instances; only error if nulls exceed threshold
              config: 
                severity: error
                error_if: ">10"
                warn_if: ">0"
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: int
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 20
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: NumberChildrenAtHome
        description: "The total no. of children of the customer"
        data_type: int
        data_tests:
          - not_null: # warn if null instances; only error if nulls exceed threshold
              config: 
                severity: error
                error_if: ">10"
                warn_if: ">0"
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: int
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 20
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: EducationLevel
        description: "The highest education obtained by the customer"
        data_type: nvarchar(40)
        data_tests:
           - not_null: # warn if null instances; only error if nulls exceed threshold
              config: 
                severity: error
                error_if: ">10"
                warn_if: ">0"
      - name: HouseOwnerFlag
        description: "Indicates whether customer owns a house"
        data_type: varchar(3)
        data_tests:
          - not_null: # warn if null instances; only error if nulls exceed threshold
              config: 
                severity: error
                error_if: ">10"
                warn_if: ">0"  
          - accepted_values:
              values: ['Yes', 'No']
      - name: HasChildrenFlag
        description: "Indicates whether customer has children"
        data_type: varchar(3)
        data_tests:
          - not_null: # warn if null instances; only error if nulls exceed threshold
              config: 
                severity: error
                error_if: ">10"
                warn_if: ">0"  
          - accepted_values:
              values: ['Yes', 'No']
      - name: CarOwnerFlag
        description: "Indicates whether customer owns a car"
        data_type: varchar(3)
        data_tests:
          - not_null: # warn if null instances; only error if nulls exceed threshold
              config: 
                severity: error
                error_if: ">10"
                warn_if: ">0"  
          - accepted_values:
              values: ['Yes', 'No']
      - name: NumberCarsOwned
        description: "The no. of cars owned by the customer"
        data_type: int
        data_tests:
          - not_null: # warn if null instances; only error if nulls exceed threshold
              config: 
                severity: error
                error_if: ">10"
                warn_if: ">0"
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: int
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 20
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: DateFirstPurchase
        description: "Date at which first items was purchased by customer (in format yyyy/mm/dd)"
        data_type: date
        data_tests:
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: date
      - name: DaysSinceFirstPurchase
        description: "The no. of days since the first purchase"
        data_type: int 
        data_tests:
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [int]
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 100000
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: CommuteDistance
        description: "The commute distance to work of the customer"
        data_type: nvarchar(15)
        data_tests:
           - not_null: # warn if null instances; only error if nulls exceed threshold
              config: 
                severity: error
                error_if: ">10"
                warn_if: ">0"  
  

  - name: dim_product
    description: "Dimension table containing product information in mart layer, derived from int_product view"
    config:
      contract: {enforced: true}
      post_hook: "{{ create_clustered_index(columns=['ProductKey'], unique=True) }}"
    columns:
      - name: ProductKey
        description: "The primary key for this table"
        data_type: int 
        constraints:
          - type: not_null
          - type: primary_key
        data_tests:
          - unique
          - not_null
          - dbt_utils.cardinality_equality:
              field: ProductKey
              to: ref('stg_product')
              # ProductKey field in int_product is inherited from stg_product and must have same cardinality.
      - name: ProductAlternateKey
        description: "The alternate key for this table"
        data_type: nvarchar(25)
        data_tests:
          - not_null # only satsifies not nullness; alternate keys are not unique
          - dbt_utils.cardinality_equality:
              field: ProductAlternateKey
              to: ref('stg_product')
              # ProductAlternateKey field in int_product is inherited from stg_product and must have same cardinality.
      - name: ProductName
        description: "Name of the product"
        data_type: nvarchar(50)
        data_tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: nvarchar
      - name: ProductDescription
        description: "Description of the product"
        data_type: nvarchar(400)
      - name: ModelName
        description: "Name of the model"
        data_type: nvarchar(50)
      - name: ProductLine
        description: "Product line"
        data_type: nchar(2)
      - name: ProductCategory
        description: "Category of the product"
        data_type: nvarchar(50)
      - name: ProductSubcategory
        description: "Subcategory of the product"
        data_type: nvarchar(50)
      - name: StandardCost
        description: "Standard cost of the product"
        data_type: decimal
      - name: Color 
        description: "Color of the product"
        data_type: nvarchar(15)
      - name: Size
        description: "Size of the product"
        data_type: nvarchar(50)
      - name: SizeRange 
        description: "Size range of the product"
        data_type: nvarchar(50)
      - name: Weight 
        description: "Weight of the product"
        data_type: float
      - name: WeightUnitMeasureCode
        description: "Weight unit measure code"
        data_type: nchar(3)
      - name: SizeUnitMeasureCode
        description: "Size unit measure code"
        data_type: nchar(3)
      - name: Class 
        description: "Class of the product"
        data_type: nchar(2)
      - name: Style 
        description: "Style of the product"
        data_type: nchar(2)
      - name: DaysToManufacture
        description: "No. of days it takes product to get manufactured"
        data_type: int
        data_tests:
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: int
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: FinishedGoodsFlag
        description: "Indicates whether a product is a finished good"
        data_type: varchar(3)
        data_tests:
          - not_null
          - accepted_values:
              values: ["Yes", "No"]
      - name: SafetyStockLevel
        description: "Safety stock level of the product"
        data_type: smallint 
        data_tests:
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [smallint]
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: ReorderPoint
        description: "Point at which product needs to be reordered"
        data_type: smallint
        data_tests:
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [smallint]
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: ListPrice
        description: "List price of the product"
        data_type: decimal
        data_tests:
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [decimal]
      - name: DealerPrice
        description: "Dealer price of the product"
        data_type: decimal
        data_tests:
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [decimal]
  

  - name: dim_date
    description: "Dimension table containing date information in mart layer, derived from int_date view"
    config:
      contract: {enforced: true}
      post_hook: "{{ create_clustered_index(columns=['DateKey'], unique=True) }}"
    columns:
      - name: DateKey
        description: "The primary key for this table"
        data_type: int 
        constraints:
          - type: not_null
          - type: primary_key
        data_tests:
          - unique
          - not_null
          - dbt_utils.cardinality_equality:
              field: DateKey
              to: ref('int_date')
              # DateKey field in stg_date is inherited from DimDate table in dbo schema and must have same cardinality.
      - name: FullDateAlternateKey
        description: "The alternate key for this table giving the full date in format yyyy-mm-dd"
        data_type: date
        constraints:
          - type: not_null
        data_tests:
          - unique 
      - name: DayNameOfWeek
        description: "Name of the weekday (in English)"
        data_type: nvarchar(10)
      - name: MonthName
        description: "Name of the month (in English)"
        data_type: nvarchar(10)
      - name: DayNumberOfWeek
        description: "The day no. of the week (commencing on Sunday, i.e., Sunday = 1)"
        data_type: tinyint
        data_tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [smallint, tinyint, int]
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1
              max_value: 7
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: DayNumberOfMonth
        description: "The day no. of the month"
        data_type: tinyint
        data_tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [smallint, tinyint, int]
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1
              max_value: 31
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: DayNumberOfYear
        description: "The day no. of the year"
        data_type: smallint
        data_tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [smallint, tinyint, int]
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1
              max_value: 366
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: WeekNumberOfYear 
        description: "The week no. of the year"
        data_type: tinyint
        data_tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [smallint, tinyint, int]
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1
              max_value: 53
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: MonthNumberOfYear
        description: "The month no. of the year"
        data_type: tinyint
        data_tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [smallint, tinyint, int]
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1
              max_value: 12
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: CalendarQuarter
        description: "The quarter no. of the calendar year"
        data_type: tinyint
        data_tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [smallint, tinyint, int]
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1
              max_value: 4
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: CalendarSemester
        description: "The semester no. of the calendar year"
        data_type: tinyint
        data_tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [smallint, tinyint, int]
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1
              max_value: 2
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: CalendarYear
        description: "The calendar year"
        data_type: smallint 
        data_tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [smallint, tinyint, int]
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1900
              max_value: 2050
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: FiscalQuarter
        description: "The quarter no. of the fiscal year"
        data_type: tinyint
        data_tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [smallint, tinyint, int]
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1
              max_value: 4
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: FiscalSemester
        description: "The semester no. of the fiscal year"
        data_type: tinyint
        data_tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [smallint, tinyint, int]
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1
              max_value: 2
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: FiscalYear
        description: "The fiscal year"
        data_type: smallint
        data_tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [smallint, tinyint, int]
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1900
              max_value: 2050
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: WeekdayFlag
        description: "Indicates whether day is a weekday (Mon-Fri)"
        data_type: varchar(3)
        data_tests:
          - not_null
          - accepted_values:
              values: ["Yes", "No"]


  - name: fct_internet_sales
    description: "Fact table of internet sales in mart layer, derived from view int_internet_sales"
    config:
      contract: {enforced: true}
      post_hook: ["{{ create_clustered_index(columns=['SalesOrderNumber', 'SalesOrderLineNumber'], unique=True) }}",
                  "{{ create_nonclustered_index(columns = ['ProductKey','CustomerKey','PromotionKey','CurrencyKey','SalesTerritoryKey','SalesReasonKey','OrderDateKey','DueDateKey','ShipDateKey']) }}"
                 ]
    data_tests:
      - dbt_utils.unique_combination_of_columns:
          combination_of_columns:
            - SalesOrderNumber
            - SalesOrderLineNumber
    columns:
      - name: SalesOrderNumber
        description: "Part of the primary key for this table"
        data_type: nvarchar(20)
        data_tests:
          - not_null
      - name: SalesOrderLineNumber
        description: "Part of the primary key for this table"
        data_type: tinyint
        data_tests:
          - not_null
      - name: ProductKey
        description: "Foreign key for this table linking to primary key of dim_product"
        data_type: int
        data_tests:
          - not_null
      - name: CustomerKey
        description: "Foreign key for this table linking to primary key of dim_customer"
        data_type: int
        data_tests:
          - not_null
      - name: PromotionKey
        description: "Foreign key for this table linking to primary key of dim_promotion"
        data_type: int
        data_tests:
          - not_null
      - name: CurrencyKey
        description: "Foreign key for this table linking to primary key of dim_currency"
        data_type: int
        data_tests:
          - not_null
      - name: SalesTerritoryKey
        description: "Foreign key for this table linking to primary key of dim_sales_territory"
        data_type: int
        data_tests:
          - not_null
      - name: SalesReasonKey
        description: "Foreign key for this table linking to primary key of DimSalesReasonKey"
        data_type: int
        data_tests:
          - not_null
      - name: OrderDateKey
        description: "Foreign key for this table linking to primary key of dim_date"
        data_type: int
        data_tests:
          - not_null
      - name: DueDateKey
        description: "Foreign key for this table linking to primary key of dim_date"
        data_type: int
        data_tests:
          - not_null
      - name: ShipDateKey
        description: "Foreign key for this table linking to primary key of dim_date"
        data_type: int
        data_tests:
          - not_null
      - name: OrderQuantity
        description: "The quantity ordered of the sales item"
        data_type: smallint
        data_tests:
          - not_null
      - name: UnitPrice
        description: "The unit price of the sales item"
        data_type: decimal
        data_tests:
          - not_null
      - name: SalesAmount
        description: "The sales amount of the sales item"
        data_type: decimal
        data_tests:
          - not_null
      - name: ExtendedAmount
        description: "The extended amount of the sales item"
        data_type: decimal
        data_tests:
          - not_null
      - name: DiscountAmount
        description: "The discount amount of the sales item"
        data_type: float
        data_tests:
          - not_null
      - name: UnitPriceDiscountPct
        description: "The discount percentage applied to the unit price of the sales item"
        data_type: float
        data_tests:
          - not_null
      - name: TotalProductCost
        description: "The total product cost of the sales item"
        data_type: decimal
        data_tests:
          - not_null
      - name: ProductStandardCost  
        description: "The standard product cost of the sales item"
        data_type: decimal
        data_tests:
          - not_null
      - name: TaxAmt
        description: "The tax amount for the sales item"
        data_type: decimal
      - name: Freight
        description: "The freight cost for the sales item"
        data_type: decimal
      - name: NoOfSalesReasons
        description: "The no. of different sales reason recorded for the sales order. The sales reason key links to the primary sales reason."
        data_type: int
        data_tests:
          - not_null

  - name: dim_sales_reason
    description: "Dimension table in mart layer, derived from int_sales_reason"
    config:
      contract: {enforced: true}
      post_hook: "{{ create_clustered_index(columns=['SalesReasonKey'], unique=True) }}"
    columns:
      - name: SalesReasonKey
        description: "Primary key for this table"
        data_type: int
        data_tests:
          - unique
          - not_null
          - dbt_utils.cardinality_equality:
              field: SalesReasonKey
              to: ref('int_sales_reason')
          - cardinality_difference_unequal_to_n:
              field: SalesReasonKey
              compare_to:  ref('stg_sales_reason')
              n: 1 # int_sales_reason must have exactly 1 record more than stg_sales_reason
      - name: SalesReasonName
        description: "Describes the sales reason. Sub-category of SalesReasonType"
        data_type: nvarchar(50)
        data_tests:
          - not_null        
      - name: SalesReasonType
        description: "Describes the type of sales reason"
        data_type: nvarchar(50)
        data_tests:
          - not_null
  
  - name: dim_currency
    description: "Dimension table in mart layer, derived from int_currency"
    config:
      contract: {enforced: true}
      post_hook: "{{ create_clustered_index(columns=['CurrencyKey'], unique=True) }}"
    columns:
      - name: CurrencyKey
        description: "Primary key for this table"
        data_type: int
        data_tests:
          - unique
          - not_null
          - dbt_utils.cardinality_equality:
              field: CurrencyKey
              to: source('sql-server-on-prem', 'DimCurrency')
      - name: CurrencyName
        description: "The name of the currency."
        data_type: nvarchar(50)
        data_tests:
          - not_null


      


