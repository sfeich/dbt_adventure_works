
version: 2

models:
  - name: stg_customer
    description: "Staging view of customer, derived from AdventureWorks core table DimCustomer"
    columns:
      - name: CustomerKey
        description: "The primary key for this table"
        data_tests:
          - unique
          - not_null
          - dbt_utils.cardinality_equality:
              field: CustomerKey
              to: source('sql-server-on-prem', 'DimCustomer')
              # CustomerKey field in stg_customer is inherited from DimCustomer table in dbo schema and must have same cardinality.
      - name: CustomerAlternateKey
        description: "The alternate key for this table"
        data_tests:
          - unique
          - not_null
      - name: GeographyKey
        description: "Foreign key to link to primary key of DimGeography table"
        data_tests:
          - not_null
      - name: FirstName
        description: "First name of the customer"
        data_tests:
          - not_null: # warn if null instances; only error if nulls exceed threshold
              config: 
                severity: error
                error_if: ">10"
                warn_if: ">0"
          - dbt_expectations.expect_column_values_to_match_like_pattern_list:
              like_pattern_list: ["%[A-Za-z]%"] # only allow alphabetic sequences
              match_on: any 
      - name: MiddleName
        description: "Middle name of the customer"       
      - name: LastName
        description: "Last name of the customer"  
        data_tests:
          - not_null: # warn if null instances; only error if nulls exceed threshold
              config: 
                severity: error
                error_if: ">10"
                warn_if: ">0"
          - dbt_expectations.expect_column_values_to_match_like_pattern_list:
              like_pattern_list: ["%[A-Za-z]%"] # only allow alphabetic sequences
              match_on: any      
      - name: BirthDate
        description: "Date of birth of customer (in format yyyy/mm/dd)"
        data_tests:
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: date
      - name: MaritalStatus
        description: "Marital status of customer"
        data_tests:
          - not_null: # warn if null instances; only error if nulls exceed threshold
              config: 
                severity: error
                error_if: ">10"
                warn_if: ">0"
          - accepted_values:
              values: ['M', 'S']
      - name: Gender
        description: "Gender of customer"
        data_tests:
          - not_null: # warn if null instances; only error if nulls exceed threshold
              config: 
                severity: error
                error_if: ">10"
                warn_if: ">0"
          - accepted_values:
              values: ['M', 'F']
      - name: YearlyIncome
        description: "The yearly income of the customer"
        data_tests:
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              strictly: false # adds an 'or equal to' to the comparison operator
          - dbt_expectations.expect_column_values_to_be_within_n_stdevs:
              sigma_threshold: 5 # warn if instances >5 sigma above mean; only error if >10 such instances
              config: 
                severity: error
                error_if: ">10"
                warn_if: ">0"
      - name: TotalChildren
        description: "The total no. of children of the customer"
        data_tests:
          - not_null: # warn if null instances; only error if nulls exceed threshold
              config: 
                severity: error
                error_if: ">10"
                warn_if: ">0"
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: tinyint
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 20
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: NumberChildrenAtHome
        description: "The total no. of children of the customer"
        data_type: int
        data_tests:
          - not_null: # warn if null instances; only error if nulls exceed threshold
              config: 
                severity: error
                error_if: ">10"
                warn_if: ">0"
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: tinyint
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 20
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: EnglishEducation
        description: "The highest education obtained by the customer (in English)"
        data_tests:
           - not_null: # warn if null instances; only error if nulls exceed threshold
              config: 
                severity: error
                error_if: ">10"
                warn_if: ">0"
      - name: HouseOwnerFlag
        description: "Indicates whether customer owns a house"
        data_tests:
          - not_null: # warn if null instances; only error if nulls exceed threshold
              config: 
                severity: error
                error_if: ">10"
                warn_if: ">0"  
          - accepted_values:
              values: [0, 1]
      - name: NumberCarsOwned
        description: "The no. of cars owned by the customer"
        data_tests:
          - not_null: # warn if null instances; only error if nulls exceed threshold
              config: 
                severity: error
                error_if: ">10"
                warn_if: ">0"
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: tinyint
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 20
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: DateFirstPurchase
        description: "Date at which first items was purchased by customer (in format yyyy/mm/dd)"
        data_tests:
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: date
      - name: CommuteDistance
        description: "The commute distance to work of the customer"
        data_tests:
           - not_null: # warn if null instances; only error if nulls exceed threshold
              config: 
                severity: error
                error_if: ">10"
                warn_if: ">0"  
 
 

  - name: stg_product_category
    description: "Staging view of product category, derived from AdventureWorks core table DimProductCategory"
    columns:
      - name: ProductCategoryKey
        description: "The primary key for this table. Can be linked to foreign key in stg_product_subcategory"
        data_tests:
          - unique
          - not_null
          - dbt_utils.cardinality_equality:
              field: ProductCategoryKey
              to: source('sql-server-on-prem', 'DimProductCategory')
              # ProductCategoryKey field in stg_product_category is inherited from DimProductCategory table in dbo schema and must have same cardinality.
      - name: EnglishProductCategoryName
        description: "Describes the product category (in English)"
        data_tests:
          - unique
          - not_null
  


  - name: stg_product_subcategory
    description: "Staging view of product subcategory, derived from AdventureWorks core table DimProductSubcategory"
    columns:
      - name: ProductSubcategoryKey
        description: "The primary key for this table"
        data_tests:
          - unique
          - not_null
          - dbt_utils.cardinality_equality:
              field: ProductSubcategoryKey
              to: source('sql-server-on-prem', 'DimProductSubcategory')
              # ProductSubcategoryKey field in stg_product_subcategory is inherited from DimProductSubcategory table in dbo schema and must have same cardinality.
      - name: ProductCategoryKey
        description: "A foreign key to link to table DimProductSubcategory"
        data_tests:
          - not_null 
      - name: EnglishProductSubcategoryName
        description: "Describes product sub-category"
        data_tests:
          - not_null
  

  
  - name: stg_product
    description: "Staging view of product, derived from AdventureWorks core table DimProduct"
    columns:
      - name: ProductKey
        description: "The primary key for this table"
        data_tests:
          - unique
          - not_null
          - dbt_utils.cardinality_equality:
              field: ProductKey
              to: source('sql-server-on-prem', 'DimProduct')
              # ProductKey field in stg_product is inherited from DimProduct table in dbo schema and must have same cardinality.
      - name: ProductAlternateKey
        description: "The alternate key for this table"
        data_tests:
          - not_null # only satsifies not nullness; alternate keys are not unique
      - name: ProductSubcategoryKey
        description: "The foreign key for the product subcategory"
      - name: EnglishProductName
        description: "The name of the product in English"
        data_tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: nvarchar
      - name: EnglishDescription
        description: "The product description in English"
      - name: ModelName
        description: "The name of the model"
      - name: ProductLine
        description: "The product line"
      - name: StandardCost
        description: "The standard cost price of the product"
      - name: Color 
        description: "The color of the product"
      - name: Size 
        description: "The size of the product"
      - name: SizeRange 
        description: "The size range of the product"
      - name: Weight 
        description: "The weight of the product"
      - name: WeightUnitMeasureCode
        description: "The weight unit measure code of the product"
      - name: SizeUnitMeasureCode
        description: "The size unit measure code"
      - name: Class
        description: "The class which the product belongs to"
      - name: Style 
        description: "The style of the product"
      - name: DaysToManufacture
        description: "The no. of days it takes to manufacture the product"
        data_tests:
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: int
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: SafetyStockLevel
        description: "The amount of stock set as safety level for a product"
        data_tests:
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [smallint, int]
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: ReorderPoint
        description: "The amount of stock at which the product is reordered"
        data_tests:
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [smallint, int]
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: ListPrice
        description: "The list price of a product"
        data_tests:
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [decimal, money]
      - name: DealerPrice
        description: "The dealer pricer of a product"
        data_tests:
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [decimal, money]
      - name: FinishedGoodsFlag
        description: "Indicates whether a product is a finished good"
        data_tests:
          - not_null
          - accepted_values:
              values: [0, 1]


  - name: stg_date
    description: "Staging view of date, derived from AdventureWorks core table DimDate"
    columns:
      - name: DateKey
        description: "The primary key for this table"
        data_tests:
          - unique
          - not_null
          - dbt_utils.cardinality_equality:
              field: DateKey
              to: source('sql-server-on-prem', 'DimDate')
              # DateKey field in stg_date is inherited from DimDate table in dbo schema and must have same cardinality.
      - name: FullDateAlternateKey
        description: "The alternate key for this table giving the full date in format yyyy-mm-dd"
        data_tests:
          - unique 
      - name: EnglishDayNameOfWeek
        description: "Name of the weekday (in English)"
      - name: EnglishMonthName
        description: "Name of the month (in English)"
      - name: DayNumberOfWeek
        description: "The day no. of the week (commencing on Sunday, i.e., Sunday = 1)"
        data_tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [smallint, tinyint, int]
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1
              max_value: 7
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: DayNumberOfMonth
        description: "The day no. of the month"
        data_tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [smallint, tinyint, int]
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1
              max_value: 31
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: DayNumberOfYear
        description: "The day no. of the year"
        data_tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [smallint, tinyint, int]
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1
              max_value: 366
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: WeekNumberOfYear 
        description: "The week no. of the year"
        data_tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [smallint, tinyint, int]
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1
              max_value: 53
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: MonthNumberOfYear
        description: "The month no. of the year"
        data_tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [smallint, tinyint, int]
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1
              max_value: 12
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: CalendarQuarter
        description: "The quarter no. of the calendar year"
        data_tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [smallint, tinyint, int]
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1
              max_value: 4
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: CalendarSemester
        description: "The semester no. of the calendar year"
        data_tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [smallint, tinyint, int]
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1
              max_value: 2
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: CalendarYear
        description: "The calendar year"
        data_tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [smallint, tinyint, int]
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1900
              max_value: 2050
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: FiscalQuarter
        description: "The quarter no. of the fiscal year"
        data_tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [smallint, tinyint, int]
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1
              max_value: 4
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: FiscalSemester
        description: "The semester no. of the fiscal year"
        data_tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [smallint, tinyint, int]
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1
              max_value: 2
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: FiscalYear
        description: "The fiscal year"
        data_tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_in_type_list:
              column_type_list: [smallint, tinyint, int]
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1900
              max_value: 2050
              strictly: false # adds an 'or equal to' to the comparison operator

  
  - name: stg_internet_sales
    description: "Staging view of internet sales, derived from AdventureWorks core table FactInternetSales"
    columns:
      - name: SalesOrderNumber
        description: "Part of the primary key for this table"
        data_tests:
          - not_null
          - dbt_utils.cardinality_equality:
              field: SalesOrderNumber
              to: source('sql-server-on-prem', 'FactInternetSales')
      - name: SalesOrderLineNumber
        description: "Part of the primary key for this table"
        data_tests:
          - not_null
          - dbt_utils.cardinality_equality:
              field: SalesOrderLineNumber
              to: source('sql-server-on-prem', 'FactInternetSales')
      - name: ProductKey
        description: "Foreign key for this table linking to primary key of dim_product"
        data_tests:
          - not_null
      - name: CustomerKey
        description: "Foreign key for this table linking to primary key of dim_customer"
        data_tests:
          - not_null
      - name: PromotionKey
        description: "Foreign key for this table linking to primary key of dim_promotion"
        data_tests:
          - not_null
      - name: CurrencyKey
        description: "Foreign key for this table linking to primary key of dim_currency"
        data_tests:
          - not_null
      - name: SalesTerritoryKey
        description: "Foreign key for this table linking to primary key of dim_sales_territory"
        data_tests:
          - not_null
      - name: OrderDateKey
        description: "Foreign key for this table linking to primary key of dim_date"
        data_tests:
          - not_null
      - name: DueDateKey
        description: "Foreign key for this table linking to primary key of dim_date"
        data_tests:
          - not_null
      - name: ShipDateKey
        description: "Foreign key for this table linking to primary key of dim_date"
        data_tests:
          - not_null
      - name: OrderQuantity
        description: "The quantity ordered of the sales item"
        data_tests:
          - not_null
      - name: UNitPrice
        description: "The unit price of the sales item"
        data_tests:
          - not_null
      - name: SalesAmount
        description: "The sales amount of the sales item"
        data_tests:
          - not_null
      - name: ExtendedAmount
        description: "The extended amount of the sales item"
        data_tests:
          - not_null
      - name: DiscountAmount
        description: "The discount amount of the sales item"
        data_tests:
          - not_null
      - name: UnitPriceDiscountPct
        description: "The discount percentage applied to the unit price of the sales item"
        data_tests:
          - not_null
      - name: TotalProductCost
        description: "The total product cost of the sales item"
        data_tests:
          - not_null
      - name: ProductStandardCost  
        description: "The standard product cost of the sales item"
        data_tests:
          - not_null
      - name: TaxAmt
        description: "The tax amount for the sales item"
      - name: Freight
        description: "The freight cost for the sales item"


  - name: stg_internet_sales_reason
    description: "Staging view of internet sales reason, derived from AdventureWorks core table FactInternetSalesReason"
    columns:
      - name: SalesOrderNumber
        description: "Part of the primary key for this table"
        data_tests:
          - not_null
          - dbt_utils.cardinality_equality:
              field: SalesOrderNumber
              to: source('sql-server-on-prem', 'FactInternetSalesReason')
      - name: SalesOrderLineNumber
        description: "Part of the primary key for this table"
        data_tests:
          - not_null
          - dbt_utils.cardinality_equality:
              field: SalesOrderLineNumber
              to: source('sql-server-on-prem', 'FactInternetSalesReason')
      - name: SalesReasonKey
        description: "Foreign key for this table linking to primary key of DimSalesReasonKey"
        data_tests:
          - not_null

  - name: stg_sales_reason
    description: "Staging view of sales reason, derived from AdventureWorks core table DimSalesReason"
    columns:
      - name: SalesReasonKey
        description: "Primary key for this table"
        data_tests:
          - unique
          - not_null
          - dbt_utils.cardinality_equality:
              field: SalesReasonKey
              to: source('sql-server-on-prem', 'DimSalesReason')
      - name: SalesReasonName
        description: "Describes the sales reason. Sub-category of SalesReasonReasonType"
        data_tests:
          - not_null
      - name: SalesReasonReasonType
        description: "Describes the type of sales reason"
        data_tests:
          - not_null

  - name: stg_sales_territory
    description: "Staging view of sales territory, derived from AdventureWorks core table DimSalesTerritory"
    columns:
      - name: SalesTerritoryKey
        description: "Primary key for this table"
        data_tests:
          - unique
          - not_null
          - dbt_utils.cardinality_equality:
              field: SalesTerritoryKey
              to: source('sql-server-on-prem', 'DimSalesTerritory')
      - name: SalesTerritoryAlternateKey
        description: "Alternate key for this table. Value '0' indicates that descriptive fields are filled with NA values."
        data_tests:
          - not_null
      - name: SalesTerritoryCountry
        description: "Describes the sales territory country. Sub-category of SalesTerritoryRegion and SalesTerritoryGroup"
        data_tests:
          - not_null
      - name: SalesTerritoryRegion
        description: "Describes the sales territory region"
        data_tests:
          - not_null
      - name: SalesTerritoryGroup
        description: "Describes the sales territory group"
        data_tests:
          - not_null
  
  - name: stg_currency
    description: "Staging view of sales currency, derived from AdventureWorks core table DimCurrency"
    columns:
      - name: CurrencyKey
        description: "Primary key for this table"
        data_tests:
          - unique
          - not_null
          - dbt_utils.cardinality_equality:
              field: CurrencyKey
              to: source('sql-server-on-prem', 'DimCurrency')
      - name: CurrencyName
        description: "The name of the currency."
        data_tests:
          - not_null

      
          
      
      

