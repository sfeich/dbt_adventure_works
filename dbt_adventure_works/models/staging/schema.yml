
version: 2

models:
  - name: stg_customer
    description: "Staging view of customer, derived from AdventureWorks core table DimCustomer"
    columns:
      - name: CustomerKey
        description: "The primary key for this table"
        data_tests:
          - unique
          - not_null
      - name: CustomerAlternateKey
        description: "The alternate key for this table"
        data_tests:
          - unique
          - not_null
      - name: GeographyKey
        description: "Foreign key to link to primary key of DimGeography table"
        data_tests:
          - not_null
      - name: FirstName
        description: "First name of the customer"
        data_tests:
          - not_null: # warn if null instances; only error if nulls exceed threshold
              config: 
                severity: error
                error_if: ">10"
                warn_if: ">0"
          - dbt_expectations.expect_column_values_to_match_like_pattern_list:
              like_pattern_list: ["%[A-Za-z]%"] # only allow alphabetic sequences
              match_on: any 
      - name: MiddleName
        description: "Middle name of the customer"       
      - name: LastName
        description: "Last name of the customer"  
        data_tests:
          - not_null: # warn if null instances; only error if nulls exceed threshold
              config: 
                severity: error
                error_if: ">10"
                warn_if: ">0"
          - dbt_expectations.expect_column_values_to_match_like_pattern_list:
              like_pattern_list: ["%[A-Za-z]%"] # only allow alphabetic sequences
              match_on: any      
      - name: BirthDate
        description: "Date of birth of customer (in format yyyy/mm/dd)"
        data_tests:
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: date
      - name: MaritalStatus
        description: "Marital status of customer"
        data_tests:
          - not_null: # warn if null instances; only error if nulls exceed threshold
              config: 
                severity: error
                error_if: ">10"
                warn_if: ">0"
          - accepted_values:
              values: ['M', 'S']
      - name: Gender
        description: "Gender of customer"
        data_tests:
          - not_null: # warn if null instances; only error if nulls exceed threshold
              config: 
                severity: error
                error_if: ">10"
                warn_if: ">0"
          - accepted_values:
              values: ['M', 'F']
      - name: YearlyIncome
        description: "The yearly income of the customer"
        data_tests:
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              strictly: false # adds an 'or equal to' to the comparison operator
          - dbt_expectations.expect_column_values_to_be_within_n_stdevs:
              sigma_threshold: 5 # warn if instances >5 sigma above mean; only error if >10 such instances
              config: 
                severity: error
                error_if: ">10"
                warn_if: ">0"
      - name: TotalChildren
        description: "The total no. of children of the customer"
        data_tests:
          - not_null: # warn if null instances; only error if nulls exceed threshold
              config: 
                severity: error
                error_if: ">10"
                warn_if: ">0"
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: tinyint
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 20
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: NumberChildrenAtHome
        description: "The total no. of children of the customer"
        data_type: int
        data_tests:
          - not_null: # warn if null instances; only error if nulls exceed threshold
              config: 
                severity: error
                error_if: ">10"
                warn_if: ">0"
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: tinyint
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 20
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: EnglishEducation
        description: "The highest education obtained by the customer (in English)"
        data_tests:
           - not_null: # warn if null instances; only error if nulls exceed threshold
              config: 
                severity: error
                error_if: ">10"
                warn_if: ">0"
      - name: HouseOwnerFlag
        description: "Indicates whether customer owns a house"
        data_tests:
          - not_null: # warn if null instances; only error if nulls exceed threshold
              config: 
                severity: error
                error_if: ">10"
                warn_if: ">0"  
          - accepted_values:
              values: [0, 1]
      - name: NumberCarsOwned
        description: "The no. of cars owned by the customer"
        data_tests:
          - not_null: # warn if null instances; only error if nulls exceed threshold
              config: 
                severity: error
                error_if: ">10"
                warn_if: ">0"
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: tinyint
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 20
              strictly: false # adds an 'or equal to' to the comparison operator
      - name: DateFirstPurchase
        description: "Date at which first items was purchased by customer (in format yyyy/mm/dd)"
        data_tests:
          - dbt_expectations.expect_column_values_to_be_of_type:
              column_type: date
      - name: CommuteDistance
        description: "The commute distance to work of the customer"
        data_tests:
           - not_null: # warn if null instances; only error if nulls exceed threshold
              config: 
                severity: error
                error_if: ">10"
                warn_if: ">0"  
 
 

  - name: stg_product_category
    description: "Staging view of product category, derived from AdventureWorks core table DimProductCategory"
    columns:
      - name: ProductCategoryKey
        description: "The primary key for this table. Can be linked to foreign key in stg_product_subcategory"
        data_tests:
          - unique
          - not_null
      - name: EnglishProductCategoryName
        description: "Describes the product category (in English)"
        data_tests:
          - unique
          - not_null
  


  - name: stg_product_subcategory
    description: "Staging view of product subcategory, derived from AdventureWorks core table DimProductSubcategory"
    columns:
      - name: ProductSubcategoryKey
        description: "The primary key for this table"
        data_tests:
          - unique
          - not_null
      - name: ProductCategoryKey
        description: "A foreign key to link to table DimProductSubcategory"
        data_tests:
          - not_null 
      - name: EnglishProductSubcategoryName
        description: "Describes product sub-category"
        data_tests:
          - not_null
  

  
  - name: stg_product
    description: "Staging view of product, derived from AdventureWorks core table DimProduct"
    columns:
      - name: ProductKey
        description: "The primary key for this table"
        data_tests:
          - unique
          - not_null
      - name: ProductAlternateKey
        description: "The alternate key for this table"
        data_tests:
          - not_null # only satsifies not nullness; alternate keys are not unique
      - name: ProductSubcategoryKey
        description: "The foreign key for the product subcategory"
      - name: EnglishProductName
        description: "The name of the product in English"
      - name: EnglishDescription
        description: "The product description in English"
      - name: ModelName
        description: "The name of the model"
      - name: ProductLine
        description: "The product line"
      - name: StandardCost
        description: "The standard cost price of the product"
      - name: Color 
        description: "The color of the product"
      - name: Size 
        description: "The size of the product"
      - name: SizeRange 
        description: "The size range of the product"
      - name: Weight 
        description: "The weight of the product"
      - name: WeightUnitMeasureCode
        description: "The weight unit measure code of the product"
      - name: SizeUnitMeasureCode
        description: "The size unit measure code"
      - name: Class
        description: "The class which the product belongs to"
      - name: Style 
        description: "The style of the product"
      - name: DaysToManufacture
        description: "The no. of days it takes to manufacture the product"
      - name: SafetyStockLevel
        description: "The amount of stock set as safety level for a product"
      - name: ReorderPoint
        description: "The amount of stock at which the product is reordered"
      - name: ListPrice
        description: "The list price of a product"
      - name: DealerPrice
        description: "The dealer pricer of a product"
      - name: FinishedGoodsFlag
        description: "Indicates whether a product is a finished good"
        data_tests:
          - accepted_values:
              values: [0, 1]
      
      

